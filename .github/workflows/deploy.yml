name: Deploy to RaspberryPi Server
on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    #JDK 셋팅
    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt'

    #프로젝트 빌드
    - name: Build with Gradle  
      run: |
        chmod +x ./gradlew
        ./gradlew build

    #도커허브 로그인
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    #도커이미지 빌드
    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        platforms: linux/arm64
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/bbegok:latest
        

    #라즈베리파이 서버에 배포
    - name: Deploy to Home Server
      env:
        PI_HOST: ${{ secrets.PI_HOST }}
        PI_PORT: ${{ secrets.PI_PORT }}
        PI_USERNAME: ${{ secrets.PI_USERNAME }}
        PI_PASSWORD: ${{ secrets.PI_PASSWORD }}
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        MYSQL_USER: ${{ secrets.MYSQL_USER }}
        MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
      run: |
        sudo apt-get update
        sudo apt-get install -y sshpass
        sshpass -p "$PI_PASSWORD" ssh -v -o StrictHostKeyChecking=no -p $PI_PORT $PI_USERNAME@$PI_HOST << EOF
        echo "$DOCKERHUB_TOKEN" | docker login -u $DOCKERHUB_USERNAME --password-stdin
        docker pull $DOCKERHUB_USERNAME/bbegok:latest
        cd Project/bbegok
        docker-compose down
        sed -i 's|image: .*|image: $DOCKERHUB_USERNAME/bbegok:latest|' docker-compose.yml
        echo "MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD" > .env
        echo "MYSQL_USER=$MYSQL_USER" >> .env
        echo "MYSQL_PASSWORD=$MYSQL_PASSWORD" >> .env
        echo "DOCKERHUB_USERNAME=$DOCKERHUB_USERNAME" >> .env
        docker-compose up -d
        docker image prune -f
        sudo systemctl reload nginx
        EOF
