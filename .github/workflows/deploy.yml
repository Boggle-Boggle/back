name: Deploy to RaspberryPi Server
on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    #JDK 셋팅
    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt'

    #프로젝트 빌드
    - name: Build with Gradle  
      run: |
        chmod +x ./gradlew
        ./gradlew build

    #도커허브 로그인
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    #도커이미지 빌드&푸쉬
    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push : true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/bbegok:latest

    #env 셋팅
    - name: Create .env file
      run: |
        envsubst < ./configuration/.env.template > ./configuration/.env
      env:
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        MYSQL_USER: ${{ secrets.MYSQL_USER }}
        MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}

    #docker-compose 및 nginx.conf파일을 서버로 복사
    - name: Copy files to Raspberry Pi
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.PI_HOST }}
        port: ${{ secrets.PI_PORT }}
        username: ${{ secrets.PI_USERNAME }}
        password: ${{ secrets.PI_PASSWORD }}
        source: "./configuration/*"
        target: "Project/bbegok/"
        strip_components: 1
        

    #라즈베리파이 서버에 배포
    - name: Deploy to Raspberry Pi
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.PI_HOST }}
        port: ${{ secrets.PI_PORT }}
        username: ${{ secrets.PI_USERNAME }}
        password: ${{ secrets.PI_PASSWORD }}
        script: |
          cd Project/bbegok/
          docker-compose pull
          docker-compose down
          docker-compose up -d
          docker image prune -f
          docker-compose --env-file .env exec -T nginx nginx -s reload || docker-compose --env-file .env restart nginx

    - name: Discord Webhook
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      uses: Ilshidur/action-discord@master
      if: always()
      with:
        args: |
          라즈베리파이 서버 배포 결과:
          상태: ${{ job.status }}
          커밋: ${{ github.sha }}
          브랜치: ${{ github.ref }}
